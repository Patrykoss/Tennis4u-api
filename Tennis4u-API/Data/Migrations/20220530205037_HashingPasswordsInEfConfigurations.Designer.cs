// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tennis4u_API.Data;

#nullable disable

namespace Tennis4u_API.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220530205037_HashingPasswordsInEfConfigurations")]
    partial class HashingPasswordsInEfConfigurations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tennis4u_API.Models.Day", b =>
                {
                    b.Property<int>("IdDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDay"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("IdDay")
                        .HasName("Day_pk");

                    b.ToTable("Day", (string)null);

                    b.HasData(
                        new
                        {
                            IdDay = 1,
                            Name = "Poniedziałek"
                        },
                        new
                        {
                            IdDay = 2,
                            Name = "Wtorek"
                        },
                        new
                        {
                            IdDay = 3,
                            Name = "Środa"
                        },
                        new
                        {
                            IdDay = 4,
                            Name = "Czwartek"
                        },
                        new
                        {
                            IdDay = 5,
                            Name = "Piątek"
                        },
                        new
                        {
                            IdDay = 6,
                            Name = "Sobota"
                        },
                        new
                        {
                            IdDay = 7,
                            Name = "Niedziela"
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.Match", b =>
                {
                    b.Property<int>("IdMatch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMatch"), 1L, 1);

                    b.Property<int?>("IdClientOne")
                        .HasColumnType("int");

                    b.Property<int?>("IdClientTwo")
                        .HasColumnType("int");

                    b.Property<int?>("IdReservation")
                        .HasColumnType("int");

                    b.Property<int>("IdStage")
                        .HasColumnType("int");

                    b.Property<int>("IdTournament")
                        .HasColumnType("int");

                    b.Property<int?>("IdWinner")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMatch")
                        .HasName("Match_pk");

                    b.HasIndex("IdClientOne");

                    b.HasIndex("IdClientTwo");

                    b.HasIndex("IdReservation")
                        .IsUnique()
                        .HasFilter("[IdReservation] IS NOT NULL");

                    b.HasIndex("IdStage");

                    b.HasIndex("IdTournament");

                    b.ToTable("Match", (string)null);

                    b.HasData(
                        new
                        {
                            IdMatch = 1,
                            IdClientOne = 2,
                            IdClientTwo = 3,
                            IdReservation = 1,
                            IdStage = 3,
                            IdTournament = 1,
                            IdWinner = 2,
                            Result = "6/2 7/6(7:5)"
                        },
                        new
                        {
                            IdMatch = 2,
                            IdClientOne = 4,
                            IdClientTwo = 5,
                            IdReservation = 2,
                            IdStage = 3,
                            IdTournament = 1,
                            IdWinner = 4,
                            Result = "6/3 6/4"
                        },
                        new
                        {
                            IdMatch = 3,
                            IdClientOne = 6,
                            IdClientTwo = 7,
                            IdReservation = 3,
                            IdStage = 3,
                            IdTournament = 1,
                            IdWinner = 6,
                            Result = "6/2 2/6 7/6(7:5)"
                        },
                        new
                        {
                            IdMatch = 4,
                            IdClientOne = 8,
                            IdClientTwo = 9,
                            IdReservation = 4,
                            IdStage = 3,
                            IdTournament = 1,
                            IdWinner = 8,
                            Result = "6/1 6/1"
                        },
                        new
                        {
                            IdMatch = 5,
                            IdClientOne = 2,
                            IdClientTwo = 4,
                            IdReservation = 5,
                            IdStage = 2,
                            IdTournament = 1,
                            IdWinner = 2,
                            Result = "6/2 6/3"
                        },
                        new
                        {
                            IdMatch = 6,
                            IdClientOne = 6,
                            IdClientTwo = 8,
                            IdReservation = 6,
                            IdStage = 2,
                            IdTournament = 1,
                            IdWinner = 6,
                            Result = "6/2 7/6(7:5)"
                        },
                        new
                        {
                            IdMatch = 7,
                            IdClientOne = 2,
                            IdClientTwo = 6,
                            IdReservation = 7,
                            IdStage = 1,
                            IdTournament = 1,
                            IdWinner = 2,
                            Result = "6/2 1/6 7/5"
                        },
                        new
                        {
                            IdMatch = 8,
                            IdStage = 3,
                            IdTournament = 2
                        },
                        new
                        {
                            IdMatch = 9,
                            IdStage = 3,
                            IdTournament = 2
                        },
                        new
                        {
                            IdMatch = 10,
                            IdStage = 3,
                            IdTournament = 2
                        },
                        new
                        {
                            IdMatch = 11,
                            IdStage = 3,
                            IdTournament = 2
                        },
                        new
                        {
                            IdMatch = 12,
                            IdStage = 2,
                            IdTournament = 2
                        },
                        new
                        {
                            IdMatch = 13,
                            IdStage = 2,
                            IdTournament = 2
                        },
                        new
                        {
                            IdMatch = 14,
                            IdStage = 1,
                            IdTournament = 2
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerson"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<DateTime?>("RefreshTokenExp")
                        .HasColumnType("datetime2");

                    b.HasKey("IdPerson");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasFilter("[RefreshToken] IS NOT NULL");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Tennis4u_API.Models.Registration", b =>
                {
                    b.Property<int>("IdTournament")
                        .HasColumnType("int");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.HasKey("IdTournament", "IdClient")
                        .HasName("Registration_pk");

                    b.HasIndex("IdClient");

                    b.ToTable("Registration", (string)null);

                    b.HasData(
                        new
                        {
                            IdTournament = 1,
                            IdClient = 2
                        },
                        new
                        {
                            IdTournament = 1,
                            IdClient = 3
                        },
                        new
                        {
                            IdTournament = 1,
                            IdClient = 4
                        },
                        new
                        {
                            IdTournament = 1,
                            IdClient = 5
                        },
                        new
                        {
                            IdTournament = 1,
                            IdClient = 6
                        },
                        new
                        {
                            IdTournament = 1,
                            IdClient = 7
                        },
                        new
                        {
                            IdTournament = 1,
                            IdClient = 8
                        },
                        new
                        {
                            IdTournament = 1,
                            IdClient = 9
                        },
                        new
                        {
                            IdTournament = 2,
                            IdClient = 4
                        },
                        new
                        {
                            IdTournament = 2,
                            IdClient = 5
                        },
                        new
                        {
                            IdTournament = 2,
                            IdClient = 6
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.Reservation", b =>
                {
                    b.Property<int>("IdReservation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdReservation"), 1L, 1);

                    b.Property<TimeSpan>("EndReservation")
                        .HasColumnType("time");

                    b.Property<int?>("IdPerson")
                        .HasColumnType("int");

                    b.Property<int>("IdState")
                        .HasColumnType("int");

                    b.Property<int>("IdTennisCourt")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartReservation")
                        .HasColumnType("time");

                    b.HasKey("IdReservation")
                        .HasName("Reservation_pk");

                    b.HasIndex("IdPerson");

                    b.HasIndex("IdState");

                    b.HasIndex("IdTennisCourt", "ReservationDate", "StartReservation", "IdState")
                        .IsUnique();

                    b.ToTable("Reservation", (string)null);

                    b.HasData(
                        new
                        {
                            IdReservation = 1,
                            EndReservation = new TimeSpan(0, 14, 0, 0, 0),
                            IdState = 1,
                            IdTennisCourt = 1,
                            ReservationDate = new DateTime(2022, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 2,
                            EndReservation = new TimeSpan(0, 14, 0, 0, 0),
                            IdState = 1,
                            IdTennisCourt = 2,
                            ReservationDate = new DateTime(2022, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 3,
                            EndReservation = new TimeSpan(0, 14, 0, 0, 0),
                            IdState = 1,
                            IdTennisCourt = 3,
                            ReservationDate = new DateTime(2022, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 4,
                            EndReservation = new TimeSpan(0, 14, 0, 0, 0),
                            IdState = 1,
                            IdTennisCourt = 4,
                            ReservationDate = new DateTime(2022, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 5,
                            EndReservation = new TimeSpan(0, 17, 0, 0, 0),
                            IdState = 1,
                            IdTennisCourt = 1,
                            ReservationDate = new DateTime(2022, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 6,
                            EndReservation = new TimeSpan(0, 17, 0, 0, 0),
                            IdState = 1,
                            IdTennisCourt = 2,
                            ReservationDate = new DateTime(2022, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 7,
                            EndReservation = new TimeSpan(0, 20, 0, 0, 0),
                            IdState = 1,
                            IdTennisCourt = 1,
                            ReservationDate = new DateTime(2022, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 8,
                            EndReservation = new TimeSpan(0, 14, 0, 0, 0),
                            IdPerson = 6,
                            IdState = 2,
                            IdTennisCourt = 2,
                            ReservationDate = new DateTime(2022, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 9,
                            EndReservation = new TimeSpan(0, 14, 0, 0, 0),
                            IdPerson = 7,
                            IdState = 2,
                            IdTennisCourt = 3,
                            ReservationDate = new DateTime(2022, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 10,
                            EndReservation = new TimeSpan(0, 20, 0, 0, 0),
                            IdPerson = 3,
                            IdState = 2,
                            IdTennisCourt = 3,
                            ReservationDate = new DateTime(2022, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 18, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 11,
                            EndReservation = new TimeSpan(0, 14, 0, 0, 0),
                            IdPerson = 3,
                            IdState = 1,
                            IdTennisCourt = 3,
                            ReservationDate = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 12, 0, 0, 0)
                        },
                        new
                        {
                            IdReservation = 12,
                            EndReservation = new TimeSpan(0, 12, 0, 0, 0),
                            IdPerson = 3,
                            IdState = 3,
                            IdTennisCourt = 3,
                            ReservationDate = new DateTime(2022, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartReservation = new TimeSpan(0, 10, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdRole")
                        .HasName("Role_pk");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            IdRole = 1,
                            Name = "Manager"
                        },
                        new
                        {
                            IdRole = 2,
                            Name = "Worker"
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.Roof", b =>
                {
                    b.Property<int>("IdRoof")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRoof"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("IdRoof")
                        .HasName("Roof_pk");

                    b.ToTable("Roof", (string)null);

                    b.HasData(
                        new
                        {
                            IdRoof = 1,
                            Name = "Hala"
                        },
                        new
                        {
                            IdRoof = 2,
                            Name = "Balon"
                        },
                        new
                        {
                            IdRoof = 3,
                            Name = "Kort otwarty"
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.StageTournament", b =>
                {
                    b.Property<int>("IdStageTournament")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStageTournament"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdStageTournament")
                        .HasName("StageTournament_pk");

                    b.ToTable("StageTournament", (string)null);

                    b.HasData(
                        new
                        {
                            IdStageTournament = 1,
                            Name = "Finał"
                        },
                        new
                        {
                            IdStageTournament = 2,
                            Name = "Półfinał"
                        },
                        new
                        {
                            IdStageTournament = 3,
                            Name = "Ćwierćfinał"
                        },
                        new
                        {
                            IdStageTournament = 4,
                            Name = "1/16"
                        },
                        new
                        {
                            IdStageTournament = 5,
                            Name = "1/32"
                        },
                        new
                        {
                            IdStageTournament = 6,
                            Name = "1/64"
                        },
                        new
                        {
                            IdStageTournament = 7,
                            Name = "1/128"
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.State", b =>
                {
                    b.Property<int>("IdState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdState"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("IdState")
                        .HasName("State_pk");

                    b.ToTable("State", (string)null);

                    b.HasData(
                        new
                        {
                            IdState = 1,
                            Name = "opłacona"
                        },
                        new
                        {
                            IdState = 2,
                            Name = "nieopłacona"
                        },
                        new
                        {
                            IdState = 3,
                            Name = "odwołana"
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.Surface", b =>
                {
                    b.Property<int>("IdSurface")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSurface"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IdSurface")
                        .HasName("Surface_pk");

                    b.ToTable("Surface", (string)null);

                    b.HasData(
                        new
                        {
                            IdSurface = 1,
                            Name = "Mączka"
                        },
                        new
                        {
                            IdSurface = 2,
                            Name = "Trawa"
                        },
                        new
                        {
                            IdSurface = 3,
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.TennisClub", b =>
                {
                    b.Property<int>("IdTennisClub")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTennisClub"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumbers")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Website")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdTennisClub")
                        .HasName("TennisClub_pk");

                    b.ToTable("TennisClub", (string)null);

                    b.HasData(
                        new
                        {
                            IdTennisClub = 1,
                            City = "Warszawa",
                            Email = "kontakt@stc.com",
                            Logo = "https://images.pexels.com/photos/209977/pexels-photo-209977.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1",
                            Name = "STC Szkolna Tennis Club",
                            PhoneNumbers = "123123123, 913134122",
                            PostCode = "12-123",
                            Street = "Szkolna 34"
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.TennisCourt", b =>
                {
                    b.Property<int>("IdTennisCourt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTennisCourt"), 1L, 1);

                    b.Property<int>("IdRoof")
                        .HasColumnType("int");

                    b.Property<int>("IdSurface")
                        .HasColumnType("int");

                    b.Property<int>("IdTennisClub")
                        .HasColumnType("int");

                    b.Property<bool>("IsLight")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdTennisCourt");

                    b.HasIndex("IdRoof");

                    b.HasIndex("IdSurface");

                    b.HasIndex("IdTennisClub");

                    b.HasIndex("Number", "IdTennisClub")
                        .IsUnique();

                    b.ToTable("TennisCourt", (string)null);
                });

            modelBuilder.Entity("Tennis4u_API.Models.Tournament", b =>
                {
                    b.Property<int>("IdTournament")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTournament"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinalDateForRegistration")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdTennisClub")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberOfPlayers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdTournament")
                        .HasName("Tournament_pk");

                    b.HasIndex("IdTennisClub");

                    b.ToTable("Tournament", (string)null);

                    b.HasData(
                        new
                        {
                            IdTournament = 1,
                            EndDate = new DateTime(2022, 5, 8, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            FinalDateForRegistration = new DateTime(2022, 5, 4, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTennisClub = 1,
                            MaxNumberOfPlayers = 8,
                            Name = "STC Masters",
                            Rank = 1,
                            StartDate = new DateTime(2022, 5, 7, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            IdTournament = 2,
                            EndDate = new DateTime(2022, 6, 26, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            FinalDateForRegistration = new DateTime(2022, 6, 24, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IdTennisClub = 1,
                            MaxNumberOfPlayers = 8,
                            Name = "ETC Masters",
                            Rank = 1,
                            StartDate = new DateTime(2022, 6, 25, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.WorkDay", b =>
                {
                    b.Property<int>("IdWorkDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdWorkDay"), 1L, 1);

                    b.Property<TimeSpan>("CloseHour")
                        .HasColumnType("time");

                    b.Property<int>("IdDay")
                        .HasColumnType("int");

                    b.Property<int>("IdTennisClub")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("OpenHour")
                        .HasColumnType("time");

                    b.HasKey("IdWorkDay")
                        .HasName("WorkDay_pk");

                    b.HasIndex("IdDay");

                    b.HasIndex("IdTennisClub");

                    b.ToTable("WorkDay", (string)null);

                    b.HasData(
                        new
                        {
                            IdWorkDay = 1,
                            CloseHour = new TimeSpan(0, 22, 0, 0, 0),
                            IdDay = 1,
                            IdTennisClub = 1,
                            OpenHour = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            IdWorkDay = 2,
                            CloseHour = new TimeSpan(0, 22, 0, 0, 0),
                            IdDay = 2,
                            IdTennisClub = 1,
                            OpenHour = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            IdWorkDay = 3,
                            CloseHour = new TimeSpan(0, 22, 0, 0, 0),
                            IdDay = 3,
                            IdTennisClub = 1,
                            OpenHour = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            IdWorkDay = 4,
                            CloseHour = new TimeSpan(0, 22, 0, 0, 0),
                            IdDay = 4,
                            IdTennisClub = 1,
                            OpenHour = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            IdWorkDay = 5,
                            CloseHour = new TimeSpan(0, 22, 0, 0, 0),
                            IdDay = 5,
                            IdTennisClub = 1,
                            OpenHour = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            IdWorkDay = 6,
                            CloseHour = new TimeSpan(0, 22, 0, 0, 0),
                            IdDay = 6,
                            IdTennisClub = 1,
                            OpenHour = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            IdWorkDay = 7,
                            CloseHour = new TimeSpan(0, 22, 0, 0, 0),
                            IdDay = 7,
                            IdTennisClub = 1,
                            OpenHour = new TimeSpan(0, 8, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.ClayCourt", b =>
                {
                    b.HasBaseType("Tennis4u_API.Models.TennisCourt");

                    b.Property<string>("ClayColor")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ToTable("ClayCourt", (string)null);

                    b.HasData(
                        new
                        {
                            IdTennisCourt = 1,
                            IdRoof = 2,
                            IdSurface = 1,
                            IdTennisClub = 1,
                            IsLight = true,
                            Number = 1,
                            Price = 70m,
                            ClayColor = "orange",
                            Material = "ceglana"
                        },
                        new
                        {
                            IdTennisCourt = 2,
                            IdRoof = 3,
                            IdSurface = 1,
                            IdTennisClub = 1,
                            IsLight = true,
                            Number = 2,
                            Price = 70m,
                            ClayColor = "blue",
                            Material = "ceglana"
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.Client", b =>
                {
                    b.HasBaseType("Tennis4u_API.Models.Person");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("Client", (string)null);

                    b.HasData(
                        new
                        {
                            IdPerson = 2,
                            Email = "j.kowalski@gmail.com",
                            FirstName = "Jan",
                            LastName = "Kowalski",
                            Password = "AQAAAAEAACcQAAAAEE8muayti3PWtK+f+Q0ezLZLTAdDKpT21EAqkfa7icGSftUvyAXABsk3AYKTLhR8Fg==",
                            Avatar = "https://cdn.pixabay.com/photo/2017/10/11/12/38/sport-2840947_960_720.png",
                            DateOfBirth = new DateTime(1992, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PhoneNumber = "123123123"
                        },
                        new
                        {
                            IdPerson = 3,
                            Email = "m.kowalski@gmail.com",
                            FirstName = "Michał",
                            LastName = "Kowalski",
                            Password = "AQAAAAEAACcQAAAAEAuSMRaRRbuKltZBwRt3XE/S14dErl/XGtn1787bUbtfqUvoKR5XJUdjV8/wRSmkyg==",
                            PhoneNumber = "123123124"
                        },
                        new
                        {
                            IdPerson = 4,
                            Email = "b.kowalski@gmail.com",
                            FirstName = "Bartek",
                            LastName = "Kowalski",
                            Password = "AQAAAAEAACcQAAAAEIxLFXvgeOrwzI9DP9FlkwZXHX05p8c2OBLbgS99mWFlNVWOt9NQ8DywFDqdTURZBA==",
                            PhoneNumber = "123123125"
                        },
                        new
                        {
                            IdPerson = 5,
                            Email = "s.kowalski@gmail.com",
                            FirstName = "Szymon",
                            LastName = "Kowalski",
                            Password = "AQAAAAEAACcQAAAAEG8KCudHrBMqy3olIqiRKOZLSW+BITn1AeCapee+Dlx1X+Y62qCAmL28p1h2NKcdQw==",
                            PhoneNumber = "123123126"
                        },
                        new
                        {
                            IdPerson = 6,
                            Email = "t.kowalski@gmail.com",
                            FirstName = "Tymek",
                            LastName = "Kowalski",
                            Password = "AQAAAAEAACcQAAAAEM2GOZ5uig/py2/Ep1t+N7xSzkkjx/nKeQZl+bbsoZo04trmWaZfwiGsuMulBY54YQ==",
                            PhoneNumber = "123123127"
                        },
                        new
                        {
                            IdPerson = 7,
                            Email = "m.kowalska@gmail.com",
                            FirstName = "Magda",
                            LastName = "Kowalska",
                            Password = "AQAAAAEAACcQAAAAEN5TubWZZr31VyEOAWUQK0wlq1+560g7ex3Ug6SbqMU7Xq3rJA7nG5YUArtATrkjKg==",
                            PhoneNumber = "123123128"
                        },
                        new
                        {
                            IdPerson = 8,
                            Email = "o.kowalska@gmail.com",
                            FirstName = "Ola",
                            LastName = "Kowalska",
                            Password = "AQAAAAEAACcQAAAAEERoeq1cKqIEqFV10N+XsL2azAXESiiwawOrE3NEJOxjtvG07Hqk8Yw/bMJLXns25w==",
                            PhoneNumber = "123123129"
                        },
                        new
                        {
                            IdPerson = 9,
                            Email = "e.kowalska@gmail.com",
                            FirstName = "Ewa",
                            LastName = "Kowalska",
                            Password = "AQAAAAEAACcQAAAAEObQL33EOiE+N5rqObbzt0CIlecA6v8WZYCDMFFkEzA+Q03+isDBNtiv9Tc4OVR3RQ==",
                            PhoneNumber = "123166129"
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.GrassCourt", b =>
                {
                    b.HasBaseType("Tennis4u_API.Models.TennisCourt");

                    b.Property<double>("HeightOfGrass")
                        .HasColumnType("float");

                    b.Property<bool>("IsNatural")
                        .HasColumnType("bit");

                    b.ToTable("GrassCourt", (string)null);

                    b.HasData(
                        new
                        {
                            IdTennisCourt = 3,
                            IdRoof = 1,
                            IdSurface = 2,
                            IdTennisClub = 1,
                            IsLight = true,
                            Number = 3,
                            Price = 70m,
                            HeightOfGrass = 2.2000000000000002,
                            IsNatural = false
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.HardCourt", b =>
                {
                    b.HasBaseType("Tennis4u_API.Models.TennisCourt");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.ToTable("HardCourt", (string)null);

                    b.HasData(
                        new
                        {
                            IdTennisCourt = 4,
                            IdRoof = 1,
                            IdSurface = 3,
                            IdTennisClub = 1,
                            IsLight = false,
                            Number = 4,
                            Price = 50m,
                            Material = "novacrylic"
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.Worker", b =>
                {
                    b.HasBaseType("Tennis4u_API.Models.Person");

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<int>("IdTennisClub")
                        .HasColumnType("int");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdTennisClub");

                    b.ToTable("Worker", (string)null);

                    b.HasData(
                        new
                        {
                            IdPerson = 1,
                            Email = "r.kowalski@gmail.com",
                            FirstName = "Roman",
                            LastName = "Kowalski",
                            Password = "AQAAAAEAACcQAAAAEOASm+77XOQMX2lm9GuSJkFXM+66OedGhHK1pLJHVbhHfNWjnaiv/UzwnI7uCUYDCw==",
                            IdRole = 1,
                            IdTennisClub = 1
                        });
                });

            modelBuilder.Entity("Tennis4u_API.Models.Match", b =>
                {
                    b.HasOne("Tennis4u_API.Models.Client", "IdClientOneNavigation")
                        .WithMany("MatchesOne")
                        .HasForeignKey("IdClientOne")
                        .HasConstraintName("Match_ClientOne");

                    b.HasOne("Tennis4u_API.Models.Client", "IdClientTwoNavigation")
                        .WithMany("MatchesTwo")
                        .HasForeignKey("IdClientTwo");

                    b.HasOne("Tennis4u_API.Models.Reservation", "IdReservationNavigation")
                        .WithOne("IdMatchNavigation")
                        .HasForeignKey("Tennis4u_API.Models.Match", "IdReservation")
                        .HasConstraintName("Match_Reservation");

                    b.HasOne("Tennis4u_API.Models.StageTournament", "IdStageTournamentNavigation")
                        .WithMany("Matches")
                        .HasForeignKey("IdStage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Match_StageTournament");

                    b.HasOne("Tennis4u_API.Models.Tournament", "IdTournamentNavigation")
                        .WithMany("Matches")
                        .HasForeignKey("IdTournament")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Match_Tournament");

                    b.Navigation("IdClientOneNavigation");

                    b.Navigation("IdClientTwoNavigation");

                    b.Navigation("IdReservationNavigation");

                    b.Navigation("IdStageTournamentNavigation");

                    b.Navigation("IdTournamentNavigation");
                });

            modelBuilder.Entity("Tennis4u_API.Models.Registration", b =>
                {
                    b.HasOne("Tennis4u_API.Models.Client", "IdClientNavigation")
                        .WithMany("Registrations")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Registration_Client");

                    b.HasOne("Tennis4u_API.Models.Tournament", "IdTournamentNavigation")
                        .WithMany("Registrations")
                        .HasForeignKey("IdTournament")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Registration_Tournament");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdTournamentNavigation");
                });

            modelBuilder.Entity("Tennis4u_API.Models.Reservation", b =>
                {
                    b.HasOne("Tennis4u_API.Models.Client", "IdClientNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdPerson")
                        .HasConstraintName("Reservation_Client");

                    b.HasOne("Tennis4u_API.Models.State", "IdStateNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdState")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Reservation_State");

                    b.HasOne("Tennis4u_API.Models.TennisCourt", "IdTennisCourtNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdTennisCourt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Reservation_TennisCourt");

                    b.Navigation("IdClientNavigation");

                    b.Navigation("IdStateNavigation");

                    b.Navigation("IdTennisCourtNavigation");
                });

            modelBuilder.Entity("Tennis4u_API.Models.TennisCourt", b =>
                {
                    b.HasOne("Tennis4u_API.Models.Roof", "IdRoofNavigation")
                        .WithMany("TennisCourts")
                        .HasForeignKey("IdRoof")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TennisCourt_Roof");

                    b.HasOne("Tennis4u_API.Models.Surface", "IdSurfaceNavigation")
                        .WithMany("TennisCourts")
                        .HasForeignKey("IdSurface")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TennisCourt_Surface");

                    b.HasOne("Tennis4u_API.Models.TennisClub", "IdTennisClubNavigation")
                        .WithMany("TennisCourts")
                        .HasForeignKey("IdTennisClub")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TennisCourt_TennisClub");

                    b.Navigation("IdRoofNavigation");

                    b.Navigation("IdSurfaceNavigation");

                    b.Navigation("IdTennisClubNavigation");
                });

            modelBuilder.Entity("Tennis4u_API.Models.Tournament", b =>
                {
                    b.HasOne("Tennis4u_API.Models.TennisClub", "IdTennisClubNavigation")
                        .WithMany("Tournaments")
                        .HasForeignKey("IdTennisClub")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Tournament_TennisClub");

                    b.Navigation("IdTennisClubNavigation");
                });

            modelBuilder.Entity("Tennis4u_API.Models.WorkDay", b =>
                {
                    b.HasOne("Tennis4u_API.Models.Day", "IdDayNavigation")
                        .WithMany("WorkDays")
                        .HasForeignKey("IdDay")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("WorkDay_Day");

                    b.HasOne("Tennis4u_API.Models.TennisClub", "IdTenniClubNavigation")
                        .WithMany("WorkDays")
                        .HasForeignKey("IdTennisClub")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("WorkDay_TennisClub");

                    b.Navigation("IdDayNavigation");

                    b.Navigation("IdTenniClubNavigation");
                });

            modelBuilder.Entity("Tennis4u_API.Models.ClayCourt", b =>
                {
                    b.HasOne("Tennis4u_API.Models.TennisCourt", null)
                        .WithOne()
                        .HasForeignKey("Tennis4u_API.Models.ClayCourt", "IdTennisCourt")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tennis4u_API.Models.Client", b =>
                {
                    b.HasOne("Tennis4u_API.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Tennis4u_API.Models.Client", "IdPerson")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tennis4u_API.Models.GrassCourt", b =>
                {
                    b.HasOne("Tennis4u_API.Models.TennisCourt", null)
                        .WithOne()
                        .HasForeignKey("Tennis4u_API.Models.GrassCourt", "IdTennisCourt")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tennis4u_API.Models.HardCourt", b =>
                {
                    b.HasOne("Tennis4u_API.Models.TennisCourt", null)
                        .WithOne()
                        .HasForeignKey("Tennis4u_API.Models.HardCourt", "IdTennisCourt")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tennis4u_API.Models.Worker", b =>
                {
                    b.HasOne("Tennis4u_API.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("Tennis4u_API.Models.Worker", "IdPerson")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("Tennis4u_API.Models.Role", "IdRoleNavigation")
                        .WithMany("Workers")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Worker_Role");

                    b.HasOne("Tennis4u_API.Models.TennisClub", "IdTennisClubNavigation")
                        .WithMany("Workers")
                        .HasForeignKey("IdTennisClub")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Worker_TennisClub");

                    b.Navigation("IdRoleNavigation");

                    b.Navigation("IdTennisClubNavigation");
                });

            modelBuilder.Entity("Tennis4u_API.Models.Day", b =>
                {
                    b.Navigation("WorkDays");
                });

            modelBuilder.Entity("Tennis4u_API.Models.Reservation", b =>
                {
                    b.Navigation("IdMatchNavigation")
                        .IsRequired();
                });

            modelBuilder.Entity("Tennis4u_API.Models.Role", b =>
                {
                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Tennis4u_API.Models.Roof", b =>
                {
                    b.Navigation("TennisCourts");
                });

            modelBuilder.Entity("Tennis4u_API.Models.StageTournament", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Tennis4u_API.Models.State", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Tennis4u_API.Models.Surface", b =>
                {
                    b.Navigation("TennisCourts");
                });

            modelBuilder.Entity("Tennis4u_API.Models.TennisClub", b =>
                {
                    b.Navigation("TennisCourts");

                    b.Navigation("Tournaments");

                    b.Navigation("WorkDays");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("Tennis4u_API.Models.TennisCourt", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Tennis4u_API.Models.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Tennis4u_API.Models.Client", b =>
                {
                    b.Navigation("MatchesOne");

                    b.Navigation("MatchesTwo");

                    b.Navigation("Registrations");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
